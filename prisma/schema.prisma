generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator fake_data_generator {
  provider = "prisma-generator-fake-data"
  output   = "../prisma/fake-data.ts"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../dbml"
  projectNote         = "Test pro ject description"
  outputName          = "schema.dbml"
  projectDatabaseType = "PostgreSQL"
  projectName         = "reserve-me"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Meeting {
  id                         Int                          @id @default(autoincrement())
  employeeId                 Int
  scheduleId                 Int                          @unique
  priceExcepted              Decimal                      @db.Decimal(8, 2)
  priceFull                  Decimal?                     @db.Decimal(8, 2)
  discount                   Decimal                      @default(0) @db.Decimal(3, 2)
  priceFinal                 Decimal?                     @db.Decimal(8, 2)
  canceled                   Boolean                      @default(false)
  cancellationReason         String                       @default("")
  employeeIdCreated          Int?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  clientsOnMeetings          ClientsOnMeetings[]
  employee                   Employee                     @relation(fields: [employeeId], references: [id])
  schedule                   MeetingSchedule              @relation(fields: [scheduleId], references: [id])
  serivcesBookedOnMeetings   ServicesBookedOnMeetings[]
  serivcesProvidedOnMeetings ServicesProvidedOnMeetings[]
}

model MeetingSchedule {
  id             Int            @id @default(autoincrement())
  locationId     Int
  startTime      DateTime       @db.Timetz(6)
  endTime        DateTime       @db.Timetz(6)
  startDate      DateTime       @db.Date
  endDate        DateTime       @default(now()) @db.Date
  repeatRate     Int            @default(0)
  repeatRateUnit RepeatRateUnit @default(DAY)
  location       Location       @relation(fields: [locationId], references: [id])
  meeting        Meeting?
}

model Client {
  id                Int                 @id @default(autoincrement())
  phoneNumber       String
  firstName         String?
  lastName          String?
  clientsOnMeetings ClientsOnMeetings[]
}

model ClientsOnMeetings {
  clientId   Int
  meetingId  Int
  assignedAt DateTime @default(now())
  client     Client   @relation(fields: [clientId], references: [id])
  meeting    Meeting  @relation(fields: [meetingId], references: [id])

  // MAYBE: assignedBy String
  @@id([clientId, meetingId])
}

model Employee {
  id        Int                @id @default(autoincrement())
  firstName String
  lastName  String
  schedule  EmployeeSchedule[]
  meetings  Meeting[]
}

model EmployeeSchedule {
  id             Int            @id @default(autoincrement())
  employeeId     Int
  locationId     Int
  startTime      DateTime       @db.Timetz(6)
  endTime        DateTime       @db.Timetz(6)
  startDate      DateTime       @db.Date
  endDate        DateTime       @default(now()) @db.Date
  repeatRate     Int            @default(0)
  repeatRateUnit RepeatRateUnit @default(DAY)
  employee       Employee       @relation(fields: [employeeId], references: [id])
  location       Location       @relation(fields: [locationId], references: [id])
}

model Location {
  id                Int                @id @default(autoincrement())
  name              String
  street            String
  houseNumber       Int                @db.SmallInt
  city              String
  postalCode        String
  employeeSchedules EmployeeSchedule[]
  meetingSchedule   MeetingSchedule[]
}

model Service {
  id                         Int                          @id @default(autoincrement())
  name                       String
  price                      Decimal                      @db.Decimal(10, 2)
  servicesBookedOnMeetings   ServicesBookedOnMeetings[]
  servicesProvidedOnMeetings ServicesProvidedOnMeetings[]
}

model ServicesProvidedOnMeetings {
  clientId   Int
  meetingId  Int
  assignedAt DateTime @default(now())
  serivce    Service  @relation(fields: [clientId], references: [id])
  meeting    Meeting  @relation(fields: [meetingId], references: [id])

  // MAYBE: assignedBy String
  @@id([clientId, meetingId])
}

model ServicesBookedOnMeetings {
  serivceId  Int
  meetingId  Int
  assignedAt DateTime @default(now())
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  serivce    Service  @relation(fields: [serivceId], references: [id])

  @@id([serivceId, meetingId])
}

enum RepeatRateUnit {
  DAY
  WEEK
  MONTH
  YEAR
}
