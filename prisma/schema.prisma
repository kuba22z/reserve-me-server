generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// generator fake_data_generator {
//   provider = "prisma-generator-fake-data"
//   output   = "../prisma/fake-data.ts"
// }

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../dbml"
  projectName         = "reserve-me"
  projectNote         = "Test pro ject description"
  projectDatabaseType = "PostgreSQL"
  outputName          = "schema.dbml"
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MeetingSchedule {
  id                 Int      @id @default(autoincrement())
  meetingId          Int
  meeting            Meeting  @relation(fields: [meetingId], references: [id],onDelete: Cascade)
  locationId         Int
  location           Location @relation(fields: [locationId], references: [id])
  startDate          DateTime
  endDate            DateTime
  canceled           Boolean  @default(false)
  cancellationReason String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Client {
  id                Int                 @id @default(autoincrement())
  phoneNumber       String              @unique
  firstName         String?
  lastName          String?
  clientsOnMeetings ClientsOnMeetings[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ClientsOnMeetings {
  clientId  Int
  meetingId Int
  client    Client   @relation(fields: [clientId], references: [id])
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([clientId, meetingId])
}

model Employee {
  id        Int                @id @default(autoincrement())
  firstName String
  lastName  String
  schedule  EmployeeSchedule[]
  meeting   Meeting[]
}

model EmployeeSchedule {
  id                 Int      @id @default(autoincrement())
  employeeId         Int
  locationId         Int
  startDate          DateTime
  endDate            DateTime
  canceled           Boolean  @default(false)
  cancellationReason String?
  repeatRate         String?
  employee           Employee @relation(fields: [employeeId], references: [id])
  location           Location @relation(fields: [locationId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Location {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  street            String
  houseNumber       Int                @db.SmallInt
  city              String
  postalCode        String
  employeeSchedules EmployeeSchedule[]
  meetingSchedules  MeetingSchedule[]
}

model Service {
  id                         Int                          @id @default(autoincrement())
  name                       String
  price                      Decimal                      @db.Decimal(10, 2)
  servicesBookedOnMeetings   ServicesBookedOnMeetings[]
  servicesProvidedOnMeetings ServicesProvidedOnMeetings[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
}

model ServicesProvidedOnMeetings {
  clientId  Int
  meetingId Int
  service   Service @relation(fields: [clientId], references: [id])
  meeting   Meeting @relation(fields: [meetingId], references: [id],onDelete: Cascade)

  @@id([clientId, meetingId])
}

model ServicesBookedOnMeetings {
  serviceId Int
  meetingId Int
  meeting   Meeting  @relation(fields: [meetingId], references: [id],onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([serviceId, meetingId])
}

model Meeting {
  id                         Int                          @id @default(autoincrement())
  employeeId                 Int?
  priceExcepted              Decimal                      @db.Decimal(8, 2)
  priceFull                  Decimal?                     @db.Decimal(8, 2)
  discount                   Decimal                      @default(0) @db.Decimal(3, 2)
  priceFinal                 Decimal?                     @db.Decimal(8, 2)
  employeeIdCreated          Int?
  repeatRate                 String?
  clientsOnMeetings          ClientsOnMeetings[]
  employee                   Employee?                    @relation(fields: [employeeId], references: [id])
  schedules                  MeetingSchedule[]
  servicesBookedOnMeetings   ServicesBookedOnMeetings[]
  servicesProvidedOnMeetings ServicesProvidedOnMeetings[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
}
